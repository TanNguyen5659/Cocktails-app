import {
  IconButton_default,
  Paper_default
} from "./chunk-WQNCALLR.js";
import {
  capitalize,
  createSvgIcon,
  init_utils
} from "./chunk-S5BCEMR4.js";
import {
  _objectWithoutProperties,
  clsx_m_default,
  darken,
  init_clsx_m,
  init_objectWithoutProperties,
  lighten,
  withStyles_default
} from "./chunk-MMAU6IJZ.js";
import {
  require_prop_types
} from "./chunk-44UFIAHL.js";
import {
  _extends,
  init_extends
} from "./chunk-CLJ6ENFI.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@material-ui/lab/esm/Alert/Alert.js
init_objectWithoutProperties();
init_extends();
var React6 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@material-ui/lab/esm/internal/svg-icons/SuccessOutlined.js
var React = __toESM(require_react());
init_utils();
var SuccessOutlined_default = createSvgIcon(React.createElement("path", {
  d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
}), "SuccessOutlined");

// node_modules/@material-ui/lab/esm/internal/svg-icons/ReportProblemOutlined.js
var React2 = __toESM(require_react());
init_utils();
var ReportProblemOutlined_default = createSvgIcon(React2.createElement("path", {
  d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
}), "ReportProblemOutlined");

// node_modules/@material-ui/lab/esm/internal/svg-icons/ErrorOutline.js
var React3 = __toESM(require_react());
init_utils();
var ErrorOutline_default = createSvgIcon(React3.createElement("path", {
  d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), "ErrorOutline");

// node_modules/@material-ui/lab/esm/internal/svg-icons/InfoOutlined.js
var React4 = __toESM(require_react());
init_utils();
var InfoOutlined_default = createSvgIcon(React4.createElement("path", {
  d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
}), "InfoOutlined");

// node_modules/@material-ui/lab/esm/internal/svg-icons/Close.js
var React5 = __toESM(require_react());
init_utils();
var Close_default = createSvgIcon(React5.createElement("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");

// node_modules/@material-ui/lab/esm/Alert/Alert.js
init_utils();
var styles = function styles2(theme) {
  var getColor = theme.palette.type === "light" ? darken : lighten;
  var getBackgroundColor = theme.palette.type === "light" ? lighten : darken;
  return {
    /* Styles applied to the root element. */
    root: _extends({}, theme.typography.body2, {
      borderRadius: theme.shape.borderRadius,
      backgroundColor: "transparent",
      display: "flex",
      padding: "6px 16px"
    }),
    /* Styles applied to the root element if `variant="standard"` and `color="success"`. */
    standardSuccess: {
      color: getColor(theme.palette.success.main, 0.6),
      backgroundColor: getBackgroundColor(theme.palette.success.main, 0.9),
      "& $icon": {
        color: theme.palette.success.main
      }
    },
    /* Styles applied to the root element if `variant="standard"` and `color="info"`. */
    standardInfo: {
      color: getColor(theme.palette.info.main, 0.6),
      backgroundColor: getBackgroundColor(theme.palette.info.main, 0.9),
      "& $icon": {
        color: theme.palette.info.main
      }
    },
    /* Styles applied to the root element if `variant="standard"` and `color="warning"`. */
    standardWarning: {
      color: getColor(theme.palette.warning.main, 0.6),
      backgroundColor: getBackgroundColor(theme.palette.warning.main, 0.9),
      "& $icon": {
        color: theme.palette.warning.main
      }
    },
    /* Styles applied to the root element if `variant="standard"` and `color="error"`. */
    standardError: {
      color: getColor(theme.palette.error.main, 0.6),
      backgroundColor: getBackgroundColor(theme.palette.error.main, 0.9),
      "& $icon": {
        color: theme.palette.error.main
      }
    },
    /* Styles applied to the root element if `variant="outlined"` and `color="success"`. */
    outlinedSuccess: {
      color: getColor(theme.palette.success.main, 0.6),
      border: "1px solid ".concat(theme.palette.success.main),
      "& $icon": {
        color: theme.palette.success.main
      }
    },
    /* Styles applied to the root element if `variant="outlined"` and `color="info"`. */
    outlinedInfo: {
      color: getColor(theme.palette.info.main, 0.6),
      border: "1px solid ".concat(theme.palette.info.main),
      "& $icon": {
        color: theme.palette.info.main
      }
    },
    /* Styles applied to the root element if `variant="outlined"` and `color="warning"`. */
    outlinedWarning: {
      color: getColor(theme.palette.warning.main, 0.6),
      border: "1px solid ".concat(theme.palette.warning.main),
      "& $icon": {
        color: theme.palette.warning.main
      }
    },
    /* Styles applied to the root element if `variant="outlined"` and `color="error"`. */
    outlinedError: {
      color: getColor(theme.palette.error.main, 0.6),
      border: "1px solid ".concat(theme.palette.error.main),
      "& $icon": {
        color: theme.palette.error.main
      }
    },
    /* Styles applied to the root element if `variant="filled"` and `color="success"`. */
    filledSuccess: {
      color: "#fff",
      fontWeight: theme.typography.fontWeightMedium,
      backgroundColor: theme.palette.success.main
    },
    /* Styles applied to the root element if `variant="filled"` and `color="info"`. */
    filledInfo: {
      color: "#fff",
      fontWeight: theme.typography.fontWeightMedium,
      backgroundColor: theme.palette.info.main
    },
    /* Styles applied to the root element if `variant="filled"` and `color="warning"`. */
    filledWarning: {
      color: "#fff",
      fontWeight: theme.typography.fontWeightMedium,
      backgroundColor: theme.palette.warning.main
    },
    /* Styles applied to the root element if `variant="filled"` and `color="error"`. */
    filledError: {
      color: "#fff",
      fontWeight: theme.typography.fontWeightMedium,
      backgroundColor: theme.palette.error.main
    },
    /* Styles applied to the icon wrapper element. */
    icon: {
      marginRight: 12,
      padding: "7px 0",
      display: "flex",
      fontSize: 22,
      opacity: 0.9
    },
    /* Styles applied to the message wrapper element. */
    message: {
      padding: "8px 0"
    },
    /* Styles applied to the action wrapper element if `action` is provided. */
    action: {
      display: "flex",
      alignItems: "center",
      marginLeft: "auto",
      paddingLeft: 16,
      marginRight: -8
    }
  };
};
var defaultIconMapping = {
  success: React6.createElement(SuccessOutlined_default, {
    fontSize: "inherit"
  }),
  warning: React6.createElement(ReportProblemOutlined_default, {
    fontSize: "inherit"
  }),
  error: React6.createElement(ErrorOutline_default, {
    fontSize: "inherit"
  }),
  info: React6.createElement(InfoOutlined_default, {
    fontSize: "inherit"
  })
};
var _ref = React6.createElement(Close_default, {
  fontSize: "small"
});
var Alert = React6.forwardRef(function Alert2(props, ref) {
  var action = props.action, children = props.children, classes = props.classes, className = props.className, _props$closeText = props.closeText, closeText = _props$closeText === void 0 ? "Close" : _props$closeText, color = props.color, icon = props.icon, _props$iconMapping = props.iconMapping, iconMapping = _props$iconMapping === void 0 ? defaultIconMapping : _props$iconMapping, onClose = props.onClose, _props$role = props.role, role = _props$role === void 0 ? "alert" : _props$role, _props$severity = props.severity, severity = _props$severity === void 0 ? "success" : _props$severity, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["action", "children", "classes", "className", "closeText", "color", "icon", "iconMapping", "onClose", "role", "severity", "variant"]);
  return React6.createElement(Paper_default, _extends({
    role,
    square: true,
    elevation: 0,
    className: clsx_m_default(classes.root, classes["".concat(variant).concat(capitalize(color || severity))], className),
    ref
  }, other), icon !== false ? React6.createElement("div", {
    className: classes.icon
  }, icon || iconMapping[severity] || defaultIconMapping[severity]) : null, React6.createElement("div", {
    className: classes.message
  }, children), action != null ? React6.createElement("div", {
    className: classes.action
  }, action) : null, action == null && onClose ? React6.createElement("div", {
    className: classes.action
  }, React6.createElement(IconButton_default, {
    size: "small",
    "aria-label": closeText,
    title: closeText,
    color: "inherit",
    onClick: onClose
  }, _ref)) : null);
});
true ? Alert.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The action to display. It renders after the message, at the end of the alert.
   */
  action: import_prop_types.default.node,
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types.default.object,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * Override the default label for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/guides/localization/).
   */
  closeText: import_prop_types.default.string,
  /**
   * The main color for the alert. Unless provided, the value is taken from the `severity` prop.
   */
  color: import_prop_types.default.oneOf(["error", "info", "success", "warning"]),
  /**
   * Override the icon displayed before the children.
   * Unless provided, the icon is mapped to the value of the `severity` prop.
   */
  icon: import_prop_types.default.node,
  /**
   * The component maps the `severity` prop to a range of different icons,
   * for instance success to `<SuccessOutlined>`.
   * If you wish to change this mapping, you can provide your own.
   * Alternatively, you can use the `icon` prop to override the icon displayed.
   */
  iconMapping: import_prop_types.default.shape({
    error: import_prop_types.default.node,
    info: import_prop_types.default.node,
    success: import_prop_types.default.node,
    warning: import_prop_types.default.node
  }),
  /**
   * Callback fired when the component requests to be closed.
   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
   *
   * @param {object} event The event source of the callback.
   */
  onClose: import_prop_types.default.func,
  /**
   * The ARIA role attribute of the element.
   */
  role: import_prop_types.default.string,
  /**
   * The severity of the alert. This defines the color and icon used.
   */
  severity: import_prop_types.default.oneOf(["error", "info", "success", "warning"]),
  /**
   * The variant to use.
   */
  variant: import_prop_types.default.oneOf(["filled", "outlined", "standard"])
} : void 0;
var Alert_default = withStyles_default(styles, {
  name: "MuiAlert"
})(Alert);

export {
  Close_default,
  Alert_default
};
//# sourceMappingURL=chunk-OACKSCJS.js.map
