import {
  useTheme
} from "./chunk-5C4ZJPXB.js";
import {
  capitalize,
  createSvgIcon,
  init_utils,
  useControlled,
  useForkRef,
  useId,
  useIsFocusVisible
} from "./chunk-GPZ6Y5NA.js";
import {
  _objectWithoutProperties,
  _slicedToArray,
  clsx_m_default,
  init_clsx_m,
  init_defineProperty,
  init_objectWithoutProperties,
  init_slicedToArray,
  init_typeof,
  withStyles_default
} from "./chunk-ZD33IDWN.js";
import {
  require_prop_types,
  require_react_is
} from "./chunk-44UFIAHL.js";
import {
  _extends,
  init_extends
} from "./chunk-47JAI3MH.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@material-ui/lab/esm/Rating/Rating.js
init_extends();
init_slicedToArray();
init_objectWithoutProperties();
var React2 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@material-ui/lab/node_modules/@material-ui/utils/esm/chainPropTypes.js
function chainPropTypes(propType1, propType2) {
  if (false) {
    return function() {
      return null;
    };
  }
  return function validate() {
    return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
  };
}

// node_modules/@material-ui/lab/node_modules/@material-ui/utils/esm/deepmerge.js
init_extends();
init_typeof();

// node_modules/@material-ui/lab/node_modules/@material-ui/utils/esm/elementAcceptingRef.js
var import_prop_types = __toESM(require_prop_types());
function isClassComponent(elementType2) {
  var _elementType$prototyp = elementType2.prototype, prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
  return Boolean(prototype.isReactComponent);
}
function acceptingRef(props, propName, componentName, location, propFullName) {
  var element = props[propName];
  var safePropName = propFullName || propName;
  if (element == null) {
    return null;
  }
  var warningHint;
  var elementType2 = element.type;
  if (typeof elementType2 === "function" && !isClassComponent(elementType2)) {
    warningHint = "Did you accidentally use a plain function component for an element instead?";
  }
  if (warningHint !== void 0) {
    return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element that can hold a ref. ".concat(warningHint, " ") + "For more information see https://mui.com/r/caveat-with-refs-guide");
  }
  return null;
}
var elementAcceptingRef = chainPropTypes(import_prop_types.default.element, acceptingRef);
elementAcceptingRef.isRequired = chainPropTypes(import_prop_types.default.element.isRequired, acceptingRef);

// node_modules/@material-ui/lab/node_modules/@material-ui/utils/esm/elementTypeAcceptingRef.js
var PropTypes2 = __toESM(require_prop_types());
function isClassComponent2(elementType2) {
  var _elementType$prototyp = elementType2.prototype, prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
  return Boolean(prototype.isReactComponent);
}
function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
  var propValue = props[propName];
  var safePropName = propFullName || propName;
  if (propValue == null) {
    return null;
  }
  var warningHint;
  if (typeof propValue === "function" && !isClassComponent2(propValue)) {
    warningHint = "Did you accidentally provide a plain function component instead?";
  }
  if (warningHint !== void 0) {
    return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element type that can hold a ref. ".concat(warningHint, " ") + "For more information see https://mui.com/r/caveat-with-refs-guide");
  }
  return null;
}
var elementTypeAcceptingRef_default = chainPropTypes(PropTypes2.elementType, elementTypeAcceptingRef);

// node_modules/@material-ui/lab/node_modules/@material-ui/utils/esm/exactProp.js
init_defineProperty();
init_extends();

// node_modules/@material-ui/lab/node_modules/@material-ui/utils/esm/getDisplayName.js
init_typeof();
var import_react_is = __toESM(require_react_is());

// node_modules/@material-ui/lab/node_modules/@material-ui/utils/esm/ponyfillGlobal.js
var ponyfillGlobal_default = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();

// node_modules/@material-ui/lab/node_modules/@material-ui/utils/esm/refType.js
var import_prop_types2 = __toESM(require_prop_types());
var refType = import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object]);

// node_modules/@material-ui/lab/esm/Rating/Rating.js
init_utils();

// node_modules/@material-ui/lab/esm/internal/svg-icons/Star.js
var React = __toESM(require_react());
init_utils();
var Star_default = createSvgIcon(React.createElement("path", {
  d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
}), "Star");

// node_modules/@material-ui/lab/esm/Rating/Rating.js
function clamp(value, min, max) {
  if (value < min) {
    return min;
  }
  if (value > max) {
    return max;
  }
  return value;
}
function getDecimalPrecision(num) {
  var decimalPart = num.toString().split(".")[1];
  return decimalPart ? decimalPart.length : 0;
}
function roundValueToPrecision(value, precision) {
  if (value == null) {
    return value;
  }
  var nearest = Math.round(value / precision) * precision;
  return Number(nearest.toFixed(getDecimalPrecision(precision)));
}
var styles = function styles2(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: "inline-flex",
      position: "relative",
      fontSize: theme.typography.pxToRem(24),
      color: "#ffb400",
      cursor: "pointer",
      textAlign: "left",
      WebkitTapHighlightColor: "transparent",
      "&$disabled": {
        opacity: 0.5,
        pointerEvents: "none"
      },
      "&$focusVisible $iconActive": {
        outline: "1px solid #999"
      }
    },
    /* Styles applied to the root element if `size="small"`. */
    sizeSmall: {
      fontSize: theme.typography.pxToRem(18)
    },
    /* Styles applied to the root element if `size="large"`. */
    sizeLarge: {
      fontSize: theme.typography.pxToRem(30)
    },
    /* Styles applied to the root element if `readOnly={true}`. */
    readOnly: {
      pointerEvents: "none"
    },
    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Pseudo-class applied to the root element if keyboard focused. */
    focusVisible: {},
    /* Visually hide an element. */
    visuallyhidden: {
      border: 0,
      clip: "rect(0 0 0 0)",
      height: 1,
      margin: -1,
      color: "#000",
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      top: 20,
      width: 1
    },
    /* Styles applied to the pristine label. */
    pristine: {
      "input:focus + &": {
        top: 0,
        bottom: 0,
        position: "absolute",
        outline: "1px solid #999",
        width: "100%"
      }
    },
    /* Styles applied to the label elements. */
    label: {
      cursor: "inherit"
    },
    /* Styles applied to the icon wrapping elements. */
    icon: {
      display: "flex",
      transition: theme.transitions.create("transform", {
        duration: theme.transitions.duration.shortest
      }),
      // Fix mouseLeave issue.
      // https://github.com/facebook/react/issues/4492
      pointerEvents: "none"
    },
    /* Styles applied to the icon wrapping elements when empty. */
    iconEmpty: {
      color: theme.palette.action.disabled
    },
    /* Styles applied to the icon wrapping elements when filled. */
    iconFilled: {},
    /* Styles applied to the icon wrapping elements when hover. */
    iconHover: {},
    /* Styles applied to the icon wrapping elements when focus. */
    iconFocus: {},
    /* Styles applied to the icon wrapping elements when active. */
    iconActive: {
      transform: "scale(1.2)"
    },
    /* Styles applied to the icon wrapping elements when decimals are necessary. */
    decimal: {
      position: "relative"
    }
  };
};
function IconContainer(props) {
  var value = props.value, other = _objectWithoutProperties(props, ["value"]);
  return React2.createElement("span", other);
}
true ? IconContainer.propTypes = {
  value: import_prop_types3.default.number.isRequired
} : void 0;
var defaultIcon = React2.createElement(Star_default, {
  fontSize: "inherit"
});
function defaultLabelText(value) {
  return "".concat(value, " Star").concat(value !== 1 ? "s" : "");
}
var Rating = React2.forwardRef(function Rating2(props, ref) {
  var classes = props.classes, className = props.className, _props$defaultValue = props.defaultValue, defaultValue = _props$defaultValue === void 0 ? null : _props$defaultValue, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, emptyIcon = props.emptyIcon, _props$emptyLabelText = props.emptyLabelText, emptyLabelText = _props$emptyLabelText === void 0 ? "Empty" : _props$emptyLabelText, _props$getLabelText = props.getLabelText, getLabelText = _props$getLabelText === void 0 ? defaultLabelText : _props$getLabelText, _props$icon = props.icon, icon = _props$icon === void 0 ? defaultIcon : _props$icon, _props$IconContainerC = props.IconContainerComponent, IconContainerComponent = _props$IconContainerC === void 0 ? IconContainer : _props$IconContainerC, _props$max = props.max, max = _props$max === void 0 ? 5 : _props$max, nameProp = props.name, onChange = props.onChange, onChangeActive = props.onChangeActive, onMouseLeave = props.onMouseLeave, onMouseMove = props.onMouseMove, _props$precision = props.precision, precision = _props$precision === void 0 ? 1 : _props$precision, _props$readOnly = props.readOnly, readOnly = _props$readOnly === void 0 ? false : _props$readOnly, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, valueProp = props.value, other = _objectWithoutProperties(props, ["classes", "className", "defaultValue", "disabled", "emptyIcon", "emptyLabelText", "getLabelText", "icon", "IconContainerComponent", "max", "name", "onChange", "onChangeActive", "onMouseLeave", "onMouseMove", "precision", "readOnly", "size", "value"]);
  var name = useId(nameProp);
  var _useControlled = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "Rating"
  }), _useControlled2 = _slicedToArray(_useControlled, 2), valueDerived = _useControlled2[0], setValueState = _useControlled2[1];
  var valueRounded = roundValueToPrecision(valueDerived, precision);
  var theme = useTheme();
  var _React$useState = React2.useState({
    hover: -1,
    focus: -1
  }), _React$useState$ = _React$useState[0], hover = _React$useState$.hover, focus = _React$useState$.focus, setState = _React$useState[1];
  var value = valueRounded;
  if (hover !== -1) {
    value = hover;
  }
  if (focus !== -1) {
    value = focus;
  }
  var _useIsFocusVisible = useIsFocusVisible(), isFocusVisible = _useIsFocusVisible.isFocusVisible, onBlurVisible = _useIsFocusVisible.onBlurVisible, focusVisibleRef = _useIsFocusVisible.ref;
  var _React$useState2 = React2.useState(false), focusVisible = _React$useState2[0], setFocusVisible = _React$useState2[1];
  var rootRef = React2.useRef();
  var handleFocusRef = useForkRef(focusVisibleRef, rootRef);
  var handleRef = useForkRef(handleFocusRef, ref);
  var handleMouseMove = function handleMouseMove2(event) {
    if (onMouseMove) {
      onMouseMove(event);
    }
    var rootNode = rootRef.current;
    var _rootNode$getBounding = rootNode.getBoundingClientRect(), right = _rootNode$getBounding.right, left = _rootNode$getBounding.left;
    var _rootNode$firstChild$ = rootNode.firstChild.getBoundingClientRect(), width = _rootNode$firstChild$.width;
    var percent;
    if (theme.direction === "rtl") {
      percent = (right - event.clientX) / (width * max);
    } else {
      percent = (event.clientX - left) / (width * max);
    }
    var newHover = roundValueToPrecision(max * percent + precision / 2, precision);
    newHover = clamp(newHover, precision, max);
    setState(function(prev) {
      return prev.hover === newHover && prev.focus === newHover ? prev : {
        hover: newHover,
        focus: newHover
      };
    });
    setFocusVisible(false);
    if (onChangeActive && hover !== newHover) {
      onChangeActive(event, newHover);
    }
  };
  var handleMouseLeave = function handleMouseLeave2(event) {
    if (onMouseLeave) {
      onMouseLeave(event);
    }
    var newHover = -1;
    setState({
      hover: newHover,
      focus: newHover
    });
    if (onChangeActive && hover !== newHover) {
      onChangeActive(event, newHover);
    }
  };
  var handleChange = function handleChange2(event) {
    var newValue = parseFloat(event.target.value);
    setValueState(newValue);
    if (onChange) {
      onChange(event, newValue);
    }
  };
  var handleClear = function handleClear2(event) {
    if (event.clientX === 0 && event.clientY === 0) {
      return;
    }
    setState({
      hover: -1,
      focus: -1
    });
    setValueState(null);
    if (onChange && parseFloat(event.target.value) === valueRounded) {
      onChange(event, null);
    }
  };
  var handleFocus = function handleFocus2(event) {
    if (isFocusVisible(event)) {
      setFocusVisible(true);
    }
    var newFocus = parseFloat(event.target.value);
    setState(function(prev) {
      return {
        hover: prev.hover,
        focus: newFocus
      };
    });
    if (onChangeActive && focus !== newFocus) {
      onChangeActive(event, newFocus);
    }
  };
  var handleBlur = function handleBlur2(event) {
    if (hover !== -1) {
      return;
    }
    if (focusVisible !== false) {
      setFocusVisible(false);
      onBlurVisible();
    }
    var newFocus = -1;
    setState(function(prev) {
      return {
        hover: prev.hover,
        focus: newFocus
      };
    });
    if (onChangeActive && focus !== newFocus) {
      onChangeActive(event, newFocus);
    }
  };
  var item = function item2(state, labelProps) {
    var id = "".concat(name, "-").concat(String(state.value).replace(".", "-"));
    var container = React2.createElement(IconContainerComponent, {
      value: state.value,
      className: clsx_m_default(classes.icon, state.filled ? classes.iconFilled : classes.iconEmpty, state.hover && classes.iconHover, state.focus && classes.iconFocus, state.active && classes.iconActive)
    }, emptyIcon && !state.filled ? emptyIcon : icon);
    if (readOnly) {
      return React2.createElement("span", _extends({
        key: state.value
      }, labelProps), container);
    }
    return React2.createElement(React2.Fragment, {
      key: state.value
    }, React2.createElement("label", _extends({
      className: classes.label,
      htmlFor: id
    }, labelProps), container, React2.createElement("span", {
      className: classes.visuallyhidden
    }, getLabelText(state.value))), React2.createElement("input", {
      onFocus: handleFocus,
      onBlur: handleBlur,
      onChange: handleChange,
      onClick: handleClear,
      disabled,
      value: state.value,
      id,
      type: "radio",
      name,
      checked: state.checked,
      className: classes.visuallyhidden
    }));
  };
  return React2.createElement("span", _extends({
    ref: handleRef,
    onMouseMove: handleMouseMove,
    onMouseLeave: handleMouseLeave,
    className: clsx_m_default(classes.root, className, size !== "medium" && classes["size".concat(capitalize(size))], disabled && classes.disabled, focusVisible && classes.focusVisible, readOnly && classes.readOnly),
    role: readOnly ? "img" : null,
    "aria-label": readOnly ? getLabelText(value) : null
  }, other), Array.from(new Array(max)).map(function(_, index) {
    var itemValue = index + 1;
    if (precision < 1) {
      var items = Array.from(new Array(1 / precision));
      return React2.createElement("span", {
        key: itemValue,
        className: clsx_m_default(classes.decimal, itemValue === Math.ceil(value) && (hover !== -1 || focus !== -1) && classes.iconActive)
      }, items.map(function($, indexDecimal) {
        var itemDecimalValue = roundValueToPrecision(itemValue - 1 + (indexDecimal + 1) * precision, precision);
        return item({
          value: itemDecimalValue,
          filled: itemDecimalValue <= value,
          hover: itemDecimalValue <= hover,
          focus: itemDecimalValue <= focus,
          checked: itemDecimalValue === valueRounded
        }, {
          style: items.length - 1 === indexDecimal ? {} : {
            width: itemDecimalValue === value ? "".concat((indexDecimal + 1) * precision * 100, "%") : "0%",
            overflow: "hidden",
            zIndex: 1,
            position: "absolute"
          }
        });
      }));
    }
    return item({
      value: itemValue,
      active: itemValue === value && (hover !== -1 || focus !== -1),
      filled: itemValue <= value,
      hover: itemValue <= hover,
      focus: itemValue <= focus,
      checked: itemValue === valueRounded
    });
  }), !readOnly && !disabled && valueRounded == null && React2.createElement(React2.Fragment, null, React2.createElement("input", {
    value: "",
    id: "".concat(name, "-empty"),
    type: "radio",
    name,
    defaultChecked: true,
    className: classes.visuallyhidden
  }), React2.createElement("label", {
    className: classes.pristine,
    htmlFor: "".concat(name, "-empty")
  }, React2.createElement("span", {
    className: classes.visuallyhidden
  }, emptyLabelText))));
});
true ? Rating.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types3.default.object,
  /**
   * @ignore
   */
  className: import_prop_types3.default.string,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types3.default.number,
  /**
   * If `true`, the rating will be disabled.
   */
  disabled: import_prop_types3.default.bool,
  /**
   * The icon to display when empty.
   */
  emptyIcon: import_prop_types3.default.node,
  /**
   * The label read when the rating input is empty.
   */
  emptyLabelText: import_prop_types3.default.node,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.
   *
   * For localization purposes, you can use the provided [translations](/guides/localization/).
   *
   * @param {number} value The rating label's value to format.
   * @returns {string}
   */
  getLabelText: import_prop_types3.default.func,
  /**
   * The icon to display.
   */
  icon: import_prop_types3.default.node,
  /**
   * The component containing the icon.
   */
  IconContainerComponent: import_prop_types3.default.elementType,
  /**
   * Maximum rating.
   */
  max: import_prop_types3.default.number,
  /**
   * The name attribute of the radio `input` elements.
   * If `readOnly` is false, the prop is required,
   * this input name`should be unique within the parent form.
   */
  name: chainPropTypes(import_prop_types3.default.string, function(props) {
    if (!props.readOnly && !props.name) {
      return new Error(["Material-UI: The prop `name` is required (when `readOnly` is false).", "Additionally, the input name should be unique within the parent form."].join("\n"));
    }
    return null;
  }),
  /**
   * Callback fired when the value changes.
   *
   * @param {object} event The event source of the callback.
   * @param {number} value The new value.
   */
  onChange: import_prop_types3.default.func,
  /**
   * Callback function that is fired when the hover state changes.
   *
   * @param {object} event The event source of the callback.
   * @param {number} value The new value.
   */
  onChangeActive: import_prop_types3.default.func,
  /**
   * @ignore
   */
  onMouseLeave: import_prop_types3.default.func,
  /**
   * @ignore
   */
  onMouseMove: import_prop_types3.default.func,
  /**
   * The minimum increment value change allowed.
   */
  precision: chainPropTypes(import_prop_types3.default.number, function(props) {
    if (props.precision < 0.1) {
      return new Error(["Material-UI: The prop `precision` should be above 0.1.", "A value below this limit has an imperceptible impact."].join("\n"));
    }
    return null;
  }),
  /**
   * Removes all hover effects and pointer events.
   */
  readOnly: import_prop_types3.default.bool,
  /**
   * The size of the rating.
   */
  size: import_prop_types3.default.oneOf(["large", "medium", "small"]),
  /**
   * The rating value.
   */
  value: import_prop_types3.default.number
} : void 0;
var Rating_default = withStyles_default(styles, {
  name: "MuiRating"
})(Rating);

export {
  chainPropTypes,
  Rating_default
};
/*! Bundled license information:

@material-ui/utils/esm/index.js:
  (** @license Material-UI v4.11.3
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=chunk-4ROSYH3D.js.map
